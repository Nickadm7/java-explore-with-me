{
	"info": {
		"_postman_id": "f6a15770-18bf-4743-b757-b7a3102ca855",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24010496"
	},
	"item": [
		{
			"name": "Add new User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test add new User\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').is.not.null; \r",
							"    pm.expect(jsonData.name, '\"name\" field').to.eql('Robot1');    \r",
							"    pm.expect(jsonData.email, '\"email\" field').to.eql('robot1@yandex.ru');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"robot1@yandex.ru\",\r\n    \"name\": \"Robot1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test add new category\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').is.not.null;\r",
							"    pm.expect(jsonData.name, '\"name\" field').to.eql('Тестовая категория');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Тестовая категория\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test add new Event\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').is.not.null;\r",
							"    pm.expect(jsonData.annotation, '\"annotation\" field').to.eql('Тестовый Event кратко');\r",
							"    pm.expect(jsonData.category.id, '\"category.id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.category.name, '\"category.name\" field').to.eql('Тестовая категория');\r",
							"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" field').to.eql(0);\r",
							"    pm.expect(jsonData.createdOn, '\"createdOn\" field').is.not.null;\r",
							"    pm.expect(jsonData.description, '\"Описание тестовый Event кратко\"');\r",
							"    pm.expect(jsonData.eventDate, '\"eventDate\" field').is.not.null;\r",
							"    pm.expect(jsonData.initiator.id, '\"initiator.id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.initiator.name, '\"initiator.name\" field').to.eql('Robot1');\r",
							"    pm.expect(jsonData.initiator.email, '\"initiator.email\" field').to.eql('robot1@yandex.ru');\r",
							"    pm.expect(jsonData.location.lat, '\"location.lat\" field').to.eql(11.111111);\r",
							"    pm.expect(jsonData.location.lon, '\"location.lon\" field').to.eql(22.222222);\r",
							"    pm.expect(jsonData.paid, '\"paid\" field').to.eql(false);\r",
							"    pm.expect(jsonData.participantLimit, '\"participantLimit\" field').to.eql(0);\r",
							"    pm.expect(jsonData.publishedOn, '\"publishedOn\" field').is.not.null;\r",
							"    pm.expect(jsonData.requestModeration, '\"requestModeration\" field').to.eql(false);\r",
							"    pm.expect(jsonData.state, '\"state\" field').to.eql('PENDING');\r",
							"    pm.expect(jsonData.title, '\"title\" field').to.eql('Title тестового Event');\r",
							"    pm.expect(jsonData.views, '\"views\" field').to.eql(null);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\": \"Тестовый Event кратко\",\n    \"category\": 1,\n    \"description\": \"Описание тестовый Event кратко\",\n    \"eventDate\": \"2033-11-11 11:11:11\",\n    \"location\": {\n        \"lat\": 11.111111,\n        \"lon\": 22.222222\n    },\n    \"paid\": false,\n    \"participantLimit\": 0,\n    \"requestModeration\": false,\n    \"title\": \"Title тестового Event\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test add new Comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.text, '\"text\" field').to.eql('Тестовый комментарий к событию');\r",
							"    pm.expect(jsonData.created, '\"created\" field').is.not.null;\r",
							"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(1);\r",
							"    pm.expect(jsonData.published, '\"published\" field').to.eql(false);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Тестовый комментарий к событию\",\r\n    \"authorId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comment"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add second Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test add new Comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
							"    pm.expect(jsonData.text, '\"text\" field').to.eql('Второй комментарий к Event');\r",
							"    pm.expect(jsonData.created, '\"created\" field').is.not.null;\r",
							"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(1);\r",
							"    pm.expect(jsonData.published, '\"published\" field').to.eql(false);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Второй комментарий к Event\",\r\n    \"authorId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comment"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Comment by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.text, '\"text\" field').to.eql('Тестовый комментарий к событию');\r",
							"    pm.expect(jsonData.created, '\"created\" field').is.not.null;\r",
							"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(1);   \r",
							"    pm.expect(jsonData.published, '\"visible\" field').to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/1/comment/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"1",
						"comment",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Comment by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.text, '\"text\" field').to.eql('NEW');\r",
							"    pm.expect(jsonData.created, '\"created\" field').is.not.null;\r",
							"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(1);   \r",
							"    pm.expect(jsonData.published, '\"visible\" field').to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"text\": \"NEW\",\r\n    \"authorId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/1/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"1",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Comment Published",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.text, '\"text\" field').to.eql('NEW');\r",
							"    pm.expect(jsonData.created, '\"created\" field').is.not.null;\r",
							"    pm.expect(jsonData.authorId, '\"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" field').to.eql(1);   \r",
							"    pm.expect(jsonData.published, '\"visible\" field').to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/published?published=true&commentId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"published"
					],
					"query": [
						{
							"key": "published",
							"value": "true"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Comments by Published true",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'comments count in total').to.eql(1);\r",
							"\r",
							"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData[0].text, 'result[0]: \"text\" field').to.eql('NEW');\r",
							"    pm.expect(jsonData[0].created, 'result[0]: \"created\" field').is.not.null;\r",
							"    pm.expect(jsonData[0].authorId, 'result[0]: \"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData[0].eventId, 'result[0]: \"eventId\" field').to.eql(1);  \r",
							"    pm.expect(jsonData[0].updated, 'result[0]: \"updated\" field').is.not.null;\r",
							"    pm.expect(jsonData[0].published, 'result[0]: \"published\" field').to.eql(true);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/published?published=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"published"
					],
					"query": [
						{
							"key": "published",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Comments by Published false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'comments count in total').to.eql(1);\r",
							"\r",
							"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(2);\r",
							"    pm.expect(jsonData[0].text, 'result[0]: \"text\" field').to.eql('Второй комментарий к Event');\r",
							"    pm.expect(jsonData[0].created, 'result[0]: \"created\" field').is.not.null;\r",
							"    pm.expect(jsonData[0].authorId, 'result[0]: \"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData[0].eventId, 'result[0]: \"eventId\" field').to.eql(1);  \r",
							"    pm.expect(jsonData[0].updated, 'result[0]: \"updated\" field').is.not.null;\r",
							"    pm.expect(jsonData[0].published, 'result[0]: \"published\" field').to.eql(false);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/published?published=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"published"
					],
					"query": [
						{
							"key": "published",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all comments for event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'comments count in total').to.eql(2);\r",
							"\r",
							"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(2);\r",
							"    pm.expect(jsonData[0].text, 'result[0]: \"text\" field').to.eql('Второй комментарий к Event');\r",
							"    pm.expect(jsonData[0].created, 'result[0]: \"created\" field').is.not.null;\r",
							"    pm.expect(jsonData[0].authorId, 'result[0]: \"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData[0].eventId, 'result[0]: \"eventId\" field').to.eql(1);  \r",
							"    pm.expect(jsonData[0].updated, 'result[0]: \"updated\" field').is.not.null;\r",
							"    pm.expect(jsonData[0].published, 'result[0]: \"published\" field').to.eql(false);\r",
							"\r",
							"    pm.expect(jsonData[1].id, 'result[0]: \"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData[1].text, 'result[0]: \"text\" field').to.eql('NEW');\r",
							"    pm.expect(jsonData[1].created, 'result[0]: \"created\" field').is.not.null;\r",
							"    pm.expect(jsonData[1].authorId, 'result[0]: \"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData[1].eventId, 'result[0]: \"eventId\" field').to.eql(1);  \r",
							"    pm.expect(jsonData[1].updated, 'result[0]: \"updated\" field').is.not.null;\r",
							"    pm.expect(jsonData[1].published, 'result[0]: \"published\" field').to.eql(true);   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/1/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"1",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Comment For Admin by commentId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'comments count in total').to.eql(1);\r",
							"\r",
							"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(2);\r",
							"    pm.expect(jsonData[0].text, 'result[0]: \"text\" field').to.eql('Второй комментарий к Event');\r",
							"    pm.expect(jsonData[0].created, 'result[0]: \"created\" field').is.not.null;\r",
							"    pm.expect(jsonData[0].authorId, 'result[0]: \"authorId\" field').to.eql(1);\r",
							"    pm.expect(jsonData[0].eventId, 'result[0]: \"eventId\" field').to.eql(1);  \r",
							"    pm.expect(jsonData[0].updated, 'result[0]: \"updated\" field').is.not.null;\r",
							"    pm.expect(jsonData[0].published, 'result[0]: \"published\" field').to.eql(false);       \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}